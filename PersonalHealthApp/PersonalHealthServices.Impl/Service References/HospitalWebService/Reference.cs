//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace PersonalHealthServices.Impl.HospitalWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HospitalWebService.HospitalWebService")]
    public interface HospitalWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetPatient", ReplyAction="http://tempuri.org/HospitalWebService/GetPatientResponse")]
        System.Threading.Tasks.Task<string> GetPatientAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetPatientByUsernameAndPassword", ReplyAction="http://tempuri.org/HospitalWebService/GetPatientByUsernameAndPasswordResponse")]
        System.Threading.Tasks.Task<string> GetPatientByUsernameAndPasswordAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetPatientByEGNAndPassword", ReplyAction="http://tempuri.org/HospitalWebService/GetPatientByEGNAndPasswordResponse")]
        System.Threading.Tasks.Task<string> GetPatientByEGNAndPasswordAsync(string egn, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/AddNewPatient", ReplyAction="http://tempuri.org/HospitalWebService/AddNewPatientResponse")]
        System.Threading.Tasks.Task<bool> AddNewPatientAsync(long id, string gender, string username, string password, string first_name, string second_name, string last_name, string egn, int age, string birth_date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetHospital", ReplyAction="http://tempuri.org/HospitalWebService/GetHospitalResponse")]
        System.Threading.Tasks.Task<string> GetHospitalAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetAllHospitals", ReplyAction="http://tempuri.org/HospitalWebService/GetAllHospitalsResponse")]
        System.Threading.Tasks.Task<string> GetAllHospitalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetDoctor", ReplyAction="http://tempuri.org/HospitalWebService/GetDoctorResponse")]
        System.Threading.Tasks.Task<string> GetDoctorAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetDoctorsByHospitalId", ReplyAction="http://tempuri.org/HospitalWebService/GetDoctorsByHospitalIdResponse")]
        System.Threading.Tasks.Task<string> GetDoctorsByHospitalIdAsync(long hospital_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetAllDoctors", ReplyAction="http://tempuri.org/HospitalWebService/GetAllDoctorsResponse")]
        System.Threading.Tasks.Task<string> GetAllDoctorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetAllAllergies", ReplyAction="http://tempuri.org/HospitalWebService/GetAllAllergiesResponse")]
        System.Threading.Tasks.Task<string> GetAllAllergiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetHospitalRecord", ReplyAction="http://tempuri.org/HospitalWebService/GetHospitalRecordResponse")]
        System.Threading.Tasks.Task<string> GetHospitalRecordAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetHospitalRecordByPatientID", ReplyAction="http://tempuri.org/HospitalWebService/GetHospitalRecordByPatientIDResponse")]
        System.Threading.Tasks.Task<string> GetHospitalRecordByPatientIDAsync(long patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetHospitalRecordByHospitalID", ReplyAction="http://tempuri.org/HospitalWebService/GetHospitalRecordByHospitalIDResponse")]
        System.Threading.Tasks.Task<string> GetHospitalRecordByHospitalIDAsync(long hospital_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetHospitalRecordByDoctorID", ReplyAction="http://tempuri.org/HospitalWebService/GetHospitalRecordByDoctorIDResponse")]
        System.Threading.Tasks.Task<string> GetHospitalRecordByDoctorIDAsync(long doctor_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetHospitalRecordByDate", ReplyAction="http://tempuri.org/HospitalWebService/GetHospitalRecordByDateResponse")]
        System.Threading.Tasks.Task<string> GetHospitalRecordByDateAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/AddNewHospitalRecord", ReplyAction="http://tempuri.org/HospitalWebService/AddNewHospitalRecordResponse")]
        System.Threading.Tasks.Task<string> AddNewHospitalRecordAsync(long id, long patient_id, long hospital_id, long doctor_id, string reason, string diagnose, string date, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetVisitation", ReplyAction="http://tempuri.org/HospitalWebService/GetVisitationResponse")]
        System.Threading.Tasks.Task<string> GetVisitationAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetVisitationByPatientID", ReplyAction="http://tempuri.org/HospitalWebService/GetVisitationByPatientIDResponse")]
        System.Threading.Tasks.Task<string> GetVisitationByPatientIDAsync(long patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetVisitationByHospitalID", ReplyAction="http://tempuri.org/HospitalWebService/GetVisitationByHospitalIDResponse")]
        System.Threading.Tasks.Task<string> GetVisitationByHospitalIDAsync(long hospital_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetVisitationByDoctorID", ReplyAction="http://tempuri.org/HospitalWebService/GetVisitationByDoctorIDResponse")]
        System.Threading.Tasks.Task<string> GetVisitationByDoctorIDAsync(long doctor_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/GetVisitationByDate", ReplyAction="http://tempuri.org/HospitalWebService/GetVisitationByDateResponse")]
        System.Threading.Tasks.Task<string> GetVisitationByDateAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HospitalWebService/AddNewVisitation", ReplyAction="http://tempuri.org/HospitalWebService/AddNewVisitationResponse")]
        System.Threading.Tasks.Task<string> AddNewVisitationAsync(long id, long patient_id, long hospital_id, long doctor_id, string reason, string diagnose, string date, string description);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface HospitalWebServiceChannel : PersonalHealthServices.Impl.HospitalWebService.HospitalWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HospitalWebServiceClient : System.ServiceModel.ClientBase<PersonalHealthServices.Impl.HospitalWebService.HospitalWebService>, PersonalHealthServices.Impl.HospitalWebService.HospitalWebService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public HospitalWebServiceClient() : 
                base(HospitalWebServiceClient.GetDefaultBinding(), HospitalWebServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_HospitalWebService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HospitalWebServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(HospitalWebServiceClient.GetBindingForEndpoint(endpointConfiguration), HospitalWebServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HospitalWebServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(HospitalWebServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HospitalWebServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(HospitalWebServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HospitalWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> GetPatientAsync(long id) {
            return base.Channel.GetPatientAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> GetPatientByUsernameAndPasswordAsync(string username, string password) {
            return base.Channel.GetPatientByUsernameAndPasswordAsync(username, password);
        }
        
        public System.Threading.Tasks.Task<string> GetPatientByEGNAndPasswordAsync(string egn, string password) {
            return base.Channel.GetPatientByEGNAndPasswordAsync(egn, password);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewPatientAsync(long id, string gender, string username, string password, string first_name, string second_name, string last_name, string egn, int age, string birth_date) {
            return base.Channel.AddNewPatientAsync(id, gender, username, password, first_name, second_name, last_name, egn, age, birth_date);
        }
        
        public System.Threading.Tasks.Task<string> GetHospitalAsync(long id) {
            return base.Channel.GetHospitalAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> GetAllHospitalsAsync() {
            return base.Channel.GetAllHospitalsAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetDoctorAsync(long id) {
            return base.Channel.GetDoctorAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> GetDoctorsByHospitalIdAsync(long hospital_id) {
            return base.Channel.GetDoctorsByHospitalIdAsync(hospital_id);
        }
        
        public System.Threading.Tasks.Task<string> GetAllDoctorsAsync() {
            return base.Channel.GetAllDoctorsAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetAllAllergiesAsync() {
            return base.Channel.GetAllAllergiesAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetHospitalRecordAsync(long id) {
            return base.Channel.GetHospitalRecordAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> GetHospitalRecordByPatientIDAsync(long patient_id) {
            return base.Channel.GetHospitalRecordByPatientIDAsync(patient_id);
        }
        
        public System.Threading.Tasks.Task<string> GetHospitalRecordByHospitalIDAsync(long hospital_id) {
            return base.Channel.GetHospitalRecordByHospitalIDAsync(hospital_id);
        }
        
        public System.Threading.Tasks.Task<string> GetHospitalRecordByDoctorIDAsync(long doctor_id) {
            return base.Channel.GetHospitalRecordByDoctorIDAsync(doctor_id);
        }
        
        public System.Threading.Tasks.Task<string> GetHospitalRecordByDateAsync(string date) {
            return base.Channel.GetHospitalRecordByDateAsync(date);
        }
        
        public System.Threading.Tasks.Task<string> AddNewHospitalRecordAsync(long id, long patient_id, long hospital_id, long doctor_id, string reason, string diagnose, string date, string description) {
            return base.Channel.AddNewHospitalRecordAsync(id, patient_id, hospital_id, doctor_id, reason, diagnose, date, description);
        }
        
        public System.Threading.Tasks.Task<string> GetVisitationAsync(long id) {
            return base.Channel.GetVisitationAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> GetVisitationByPatientIDAsync(long patient_id) {
            return base.Channel.GetVisitationByPatientIDAsync(patient_id);
        }
        
        public System.Threading.Tasks.Task<string> GetVisitationByHospitalIDAsync(long hospital_id) {
            return base.Channel.GetVisitationByHospitalIDAsync(hospital_id);
        }
        
        public System.Threading.Tasks.Task<string> GetVisitationByDoctorIDAsync(long doctor_id) {
            return base.Channel.GetVisitationByDoctorIDAsync(doctor_id);
        }
        
        public System.Threading.Tasks.Task<string> GetVisitationByDateAsync(string date) {
            return base.Channel.GetVisitationByDateAsync(date);
        }
        
        public System.Threading.Tasks.Task<string> AddNewVisitationAsync(long id, long patient_id, long hospital_id, long doctor_id, string reason, string diagnose, string date, string description) {
            return base.Channel.AddNewVisitationAsync(id, patient_id, hospital_id, doctor_id, reason, diagnose, date, description);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_HospitalWebService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_HospitalWebService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:4116/HospitalWebServiceImpl.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return HospitalWebServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_HospitalWebService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return HospitalWebServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_HospitalWebService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_HospitalWebService,
        }
    }
}
